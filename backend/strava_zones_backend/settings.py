"""
Django settings for strava_zones_backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from __future__ import annotations

import logging
import os
from pathlib import Path

import dotenv
from cryptography.fernet import Fernet

# Configure basic logging
logging.basicConfig(
	level=logging.INFO,
	format="%(asctime)s [%(levelname)s] %(message)s",
	handlers=[logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in the project root
dotenv_path = BASE_DIR.parent / ".env"
if dotenv_path.exists():
	# Override existing env vars with values from .env
	dotenv.load_dotenv(dotenv_path=dotenv_path, override=True)
else:
	logger.warning(
		"No .env file found at %s. Using environment variables if set elsewhere.", dotenv_path
	)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
	raise ValueError(
		"SECRET_KEY environment variable is not set. "
		"Set it in your .env file or environment variables."
	)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"

# Default to empty list if not set
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")
# Filter out empty strings that might result from splitting an empty string
ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host]


# Application definition

INSTALLED_APPS = [
	"django.contrib.admin",
	"django.contrib.auth",
	"rest_framework",
	"rest_framework.authtoken",
	"django.contrib.contenttypes",
	"django.contrib.sessions",
	"django.contrib.messages",
	"django.contrib.staticfiles",
	# Third-party apps
	"corsheaders",
	"django_extensions",  # Added for runserver_plus
	# Your apps
	"api.apps.ApiConfig",
]

MIDDLEWARE = [
	"django.middleware.security.SecurityMiddleware",
	"corsheaders.middleware.CorsMiddleware",
	"django.contrib.sessions.middleware.SessionMiddleware",
	"django.middleware.common.CommonMiddleware",
	"django.middleware.csrf.CsrfViewMiddleware",
	"django.contrib.auth.middleware.AuthenticationMiddleware",
	"django.contrib.messages.middleware.MessageMiddleware",
	"django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "strava_zones_backend.urls"

TEMPLATES = [
	{
		"BACKEND": "django.template.backends.django.DjangoTemplates",
		"DIRS": [
			# Add project-level templates directory
			BASE_DIR / "templates",
		],
		"APP_DIRS": True,
		"OPTIONS": {
			"context_processors": [
				"django.template.context_processors.debug",
				"django.template.context_processors.request",
				"django.contrib.auth.context_processors.auth",
				"django.contrib.messages.context_processors.messages",
			],
		},
	},
]

WSGI_APPLICATION = "strava_zones_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
	"default": {
		"ENGINE": os.getenv("DB_ENGINE", "django.db.backends.postgresql"),
		"NAME": os.getenv("DB_NAME"),
		"USER": os.getenv("DB_USER"),
		"PASSWORD": os.getenv("DB_PASSWORD"),
		"HOST": os.getenv("DB_HOST", "localhost"),
		"PORT": os.getenv("DB_PORT", "5432"),
	}
}

# Check if essential DB details are missing
if DATABASES["default"]["ENGINE"] == "django.db.backends.postgresql" and not all(
	[DATABASES["default"]["NAME"], DATABASES["default"]["USER"], DATABASES["default"]["PASSWORD"]]
):
	logger.warning(
		"Missing one or more required database environment variables "
		"(DB_NAME, DB_USER, DB_PASSWORD). Database connection may fail."
	)


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
	},
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = "static/"

# Add this line for production:
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = [
	os.path.join(BASE_DIR, "api", "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SECURE = True

if EC2_PUBLIC_HOSTNAME := os.getenv("EC2_PUBLIC_HOSTNAME"):
	CORS_PRODUCTION_ORIGINS = [
		f"https://{EC2_PUBLIC_HOSTNAME}",
		f"http://{EC2_PUBLIC_HOSTNAME}",  # Often needed for initial HTTP access
	]
else:
	CORS_PRODUCTION_ORIGINS = []

CSRF_TRUSTED_ORIGINS = [
	"https://localhost:8000",
	"https://127.0.0.1:8000",
	"https://strava-zones.com",
	f"chrome-extension://{os.getenv('CHROME_EXTENSION_ID')}",
	f"chrome-extension://{os.getenv('CHROME_EXTENSION_DEV_ID')}",
	*CORS_PRODUCTION_ORIGINS,
]

# Custom Settings for REST Framework
REST_FRAMEWORK = {
	"DEFAULT_RENDERER_CLASSES": [
		"rest_framework.renderers.JSONRenderer",
		"rest_framework.renderers.BrowsableAPIRenderer",
	],
	"DEFAULT_AUTHENTICATION_CLASSES": [
		"rest_framework.authentication.SessionAuthentication",
		"rest_framework.authentication.TokenAuthentication",
	],
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
	"https://www.strava.com",
	"http://localhost:8000",
	"http://127.0.0.1:8000",
	"https://localhost:8000",
	"https://127.0.0.1:8000",
	"https://strava-zones.com",
	f"chrome-extension://{os.getenv('CHROME_EXTENSION_ID')}",
	f"chrome-extension://{os.getenv('CHROME_EXTENSION_DEV_ID')}",
]
CORS_ALLOW_CREDENTIALS = True

# Session Cookie Settings for cross-site requests
SESSION_COOKIE_SAMESITE = "None"  # Allow sending cookie on cross-site requests
SESSION_COOKIE_SECURE = True

# Fernet encryption settings for token storage

if not (FERNET_KEY := os.getenv("FERNET_KEY")):
	raise ValueError("FERNET_KEY environment variable is not set. Encryption will fail.")
try:
	Fernet(FERNET_KEY.encode())
except ValueError as e:
	raise ValueError("FERNET_KEY environment variable is not a valid Fernet key.") from e

# Strava API credentials
STRAVA_CLIENT_ID = os.getenv("STRAVA_CLIENT_ID")
STRAVA_CLIENT_SECRET = os.getenv("STRAVA_CLIENT_SECRET")
# Strava API Webhook info credentials
STRAVA_WEBHOOK_VERIFY_TOKEN = os.getenv("STRAVA_WEBHOOK_VERIFY_TOKEN")
