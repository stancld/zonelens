[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "strava-zones-backend"
version = "0.4.0"
description = "Backend API for Strava HR Zone Calendar Visualization extension"
authors = [
	{name = "Daniel Stancl", email = "daniel.stancl@gmail.com"},
]
requires-python = ">=3.13"
dependencies = [
    "cryptography",
    "django",
    "django-apscheduler",
    "django-cors-headers",
    "django-extensions",
    "djangorestframework",
    "gunicorn",
    "ipython",
    "psycopg2-binary",
    "pyOpenSSL",
    "python-dotenv",
    "pytz",
    "requests",
    "werkzeug",
]

[project.optional-dependencies]
dev = [
	"pytest",
	"pytest-cov",
	"pytest-mock",
	"requests-mock",
    "types-pytz",
    "types-requests",
    "uv",
]

[tool.hatch.build.targets.wheel]
packages = ["strava-zones-backend"]

[tool.ruff]
target-version = "py312"
line-length = 99
include = ["pyproject.toml", "strava-zones-backend/**/*.py", "tests/**/*.py"]

[tool.ruff.lint]
select = [
    "B",  # bugbear
    "C",  # mccabe
    "D",  # PEP257 (pydocstyle)
    "E",  # PEP8 (pycodestyle)
    "F",  # pyflakes
    "I",  # isort
    "W",  # PEP8  (pycodestyle)
]
extend-select = [
    "ARG",  # unused arguments
    "C4",  # comprehensions
    "DJ",  # flake8-django
    "ERA",  # eradicate,
    "EXE",  # executable
    "ICN",  # import conventions
    "G",  # logging-format
    "NPY",  # numpy-specific rules
    "PL",  # pylint
    "RET",  # returns formatting
    "RUF",  # ruff-specific rules
    "SIM",  # flake8-simplify
    "T",  # print
    "T10",  # breakpoint
    "TID252",  # absolute imports
    "TCH",  # type-checking
    "UP",  # pyupgrade
]
ignore = [
    "D1",    # Missing docstrings
    "D2",    # Docstring content issues
    "D4",    # Docstring formatting
    "E101",  # Indentation contains mixed spaces and tabs
    "E111",  # Indentation is not a multiple of 4
    "E114",  # Indentation is not a multiple of 4 (comment)
    "ERA001",  # flaky
    "G004",
    "PLR0402",  # Use `from {module} import {name}` in lieu of alias (can be in clash with our import conventions)
    "PLR0904",  # Too many public methods (more than 20)
    "PLR0912",  # Cyclomatic complexity (already checked by mccabe)
    "PLR0913",  # Too many arguments to function call (problematic for ML models which usually need a lot of inputs)
    "PLR2004",  # Magic value used in comparison, consider replacing `{value}` with a constant variable (>600 occurrences, false positives)
    "PLW0120",  # `else` clause on loop without a `break` statement (false positives, we use often return statement)
    "PLW1510",  # `subprocess.run` without explicit `check` argument
    "PLW2901",  #  Outer `{outer_kind}` variable `{name}` overwritten by inner `{inner_kind}` target
    "RUF012",
    "W191",  # Indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"api/tests.py" = ["ARG"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-returns = 10

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 12

[tool.ruff.format]
indent-style = "tab"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
